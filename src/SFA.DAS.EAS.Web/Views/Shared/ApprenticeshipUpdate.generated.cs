#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFA.DAS.EmployerCommitments.Web.Views.Shared
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using SFA.DAS.EmployerCommitments;
    using SFA.DAS.EmployerCommitments.Web.Extensions;
    using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Shared/ApprenticeshipUpdate.cshtml")]
    public partial class ApprenticeshipUpdate : System.Web.Mvc.WebViewPage<UpdateApprenticeshipViewModel>
    {
 
    private static string GetNameChange(ApprenticeshipDetailsViewModel originalApprenticeship, UpdateApprenticeshipViewModel update)
    {
        var first = !string.IsNullOrWhiteSpace(update.FirstName) ? update.FirstName : originalApprenticeship.FirstName;
        var last = !string.IsNullOrWhiteSpace(update.LastName) ? update.LastName : originalApprenticeship.LastName;
        return $"{first} {last}";
    }

    public string FormatCost(string cost)
    {
        if (!string.IsNullOrEmpty(cost))
        {
            var dCost = decimal.Parse(cost);
            return $"£{dCost:n0}";
        }
        return string.Empty;
    }

        public ApprenticeshipUpdate()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n");

  
    var currentValuHeader = string .IsNullOrEmpty(Model.CurrentTableHeadingText) ? "Current" :  Model.CurrentTableHeadingText;

WriteLiteral("\r\n\r\n<table");

WriteLiteral(" class=\"edited-changes\"");

WriteLiteral(">\r\n    <thead>\r\n    <tr>\r\n        <th></th>\r\n        <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">");

                   Write(currentValuHeader);

WriteLiteral("</th>\r\n        <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Changed to</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n");

    
     if (!string.IsNullOrWhiteSpace(Model.FirstName) || !string.IsNullOrWhiteSpace(Model.LastName))
    {

WriteLiteral("        <tr>\r\n            <td>Name</td>\r\n            <td>");

           Write(Model.OriginalApprenticeship.FirstName);

WriteLiteral(" ");

                                                   Write(Model.OriginalApprenticeship.LastName);

WriteLiteral("</td>\r\n            <td>");

           Write(GetNameChange(Model.OriginalApprenticeship, Model));

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("FirstName", Model.FirstName));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("Lastname", Model.LastName));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (Model.DateOfBirth?.DateTime != null)
    {

WriteLiteral("        <tr>\r\n            <td>Date of birth</td>\r\n            <td>\r\n");

                
                 if (Model.OriginalApprenticeship.DateOfBirth.HasValue)
                {
                    
               Write(Model.OriginalApprenticeship.DateOfBirth.Value.ToGdsFormat());

                                                                                 
                }

WriteLiteral("            </td>\r\n            <td>");

           Write(Model.DateOfBirth.DateTime.Value.ToGdsFormat());

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("DateOfBirth.Day", Model.DateOfBirth.Day));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("DateOfBirth.Month", Model.DateOfBirth.Month));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("DateOfBirth.Year", Model.DateOfBirth.Year));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (Model.TrainingName != null)
    {

WriteLiteral("        <tr>\r\n            <td>Apprenticeship training course</td>\r\n            <t" +
"d>");

           Write(Model.OriginalApprenticeship.TrainingName);

WriteLiteral(" </td>\r\n            <td>");

           Write(Model.TrainingName);

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("TrainingCode", Model.TrainingCode));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("TrainingName", Model.TrainingName));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("TrainingType", Model.TrainingType));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (Model.StartDate?.DateTime != null)
    {

WriteLiteral("        <tr>\r\n            <td>Planned training start date</td>\r\n            <td>");

           Write(Model.OriginalApprenticeship.StartDate.Value.ToGdsFormat());

WriteLiteral(" </td>\r\n            <td>");

           Write(Model.StartDate.DateTime.Value.ToGdsFormat());

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("StartDate.Month", Model.StartDate.Month));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("StartDate.Year", Model.StartDate.Year));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (Model.EndDate?.DateTime != null)
    {

WriteLiteral("        <tr>\r\n            <td>Planned training end date</td>\r\n            <td>");

           Write(Model.OriginalApprenticeship.EndDate.Value.ToGdsFormat());

WriteLiteral(" </td>\r\n            <td>");

           Write(Model.EndDate.DateTime.Value.ToGdsFormat());

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("EndDate.Month", Model.EndDate.Month));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("EndDate.Year", Model.EndDate.Year));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (!string.IsNullOrEmpty(Model.Cost))
    { 

WriteLiteral("        <tr>\r\n            <td>Cost</td>\r\n            <td>");

           Write(Model.OriginalApprenticeship.Cost.FormatCost());

WriteLiteral(" </td>\r\n            <td>");

           Write(FormatCost(Model.Cost));

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("Cost", Model.Cost));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("\r\n");

    
     if (Model.EmployerRef != null)
    {

WriteLiteral("        <tr>\r\n            <td>Reference</td>\r\n            <td>");

           Write(Model.OriginalApprenticeship.EmployerReference);

WriteLiteral("</td>\r\n            <td>");

           Write(Model.EmployerRef);

WriteLiteral("</td>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("EmployerRef", Model.EmployerRef));

WriteLiteral("\r\n        </tr>\r\n");

    }

WriteLiteral("    </tbody>\r\n</table>\r\n\r\n");

        }
    }
}
#pragma warning restore 1591
