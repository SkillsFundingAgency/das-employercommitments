@using SFA.DAS.EmployerCommitments.Web
@using SFA.DAS.EmployerCommitments.Web.Extensions
@using SFA.DAS.EmployerCommitments.Web.ViewModels

@{
    ViewBag.Title = "Review your cohort";
    ViewBag.Section = "apprentices";
    ViewBag.PageID = "apprentice-details";
}

@model OrchestratorResponse<CommitmentDetailsViewModel>

<div id="cohort-details">
    <div class="grid-row">
        <div class="column-full">

            @if (Model.Data.Errors.Any())
            {
                <div class="validation-summary-errors error-summary">
                    <h1 id="error-summary" class="heading-medium error-summary-heading">
                        There are errors on this page that need your attention
                    </h1>
                    <ul class="error-summary-list">
                        @foreach (var errorMsg in Model.Data.Errors)
                        {
                            <li>
                                <a href="#error-message-@errorMsg.Key" data-focuses="error-message-@errorMsg.Key">
                                    @errorMsg.Value
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
            else if (Model.Data.Warnings.Any())
            {
                <div class="validation-summary-max-funding error-summary">
                    <h1 id="warning-summary" class="heading-medium warning-summary-heading">
                        Warnings for your attention
                    </h1>
                    <ul class="max-funding-summary-list">
                        @foreach (var warning in Model.Data.Warnings)
                        {
                            <li>
                                <a href="#max-funding-group-@warning.Key" data-focuses="max-funding-group-@warning.Key">
                                    @warning.Value
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
            
            <h1 class="heading-xlarge">@Model.Data.PageTitle</h1>

        </div>
    </div>

    <div class="grid-row" id="review-cohorts">
        <div class="column-one-third all-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Data.Apprenticeships.Count</h2>
                <p class="heading-small">@PluraliseApprentice(Model.Data.Apprenticeships.Count)</p>
            </div>
        </div>
        <div class="column-one-third incomplete-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Data.Apprenticeships.Count(x => !x.CanBeApproved)</h2>
                <p class="heading-small">@PluraliseIncompleteRecords(Model.Data.Apprenticeships.Count(x => !x.CanBeApproved))</p>
            </div>
        </div>
        <div class="column-one-third total-cost">
            <div class="dynamic-cost-display">
                @{
                    var totalCost = Model.Data.Apprenticeships.Sum(x => x.Cost ?? 0).ToString("N0");
                    var totalClass = string.Empty;


                    if (totalCost.Length > 3)
                    {
                        totalClass = "short";
                    }
                    if (totalCost.Length > 6)
                    {
                        totalClass = "long";
                    }
                    if (totalCost.Length > 9)
                    {
                        totalClass = "longer";
                    }

                }
                <h2 class="@totalClass bold-xlarge">&pound;@totalCost</h2>

                <p class="heading-small">Total cost</p>
            </div>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-one-third employer-details">
            <p><span class="strong">Training provider:</span> @Model.Data.ProviderName</p>
            <p><span class="strong">Status:</span> @Model.Data.Status.GetDescription()</p>
        </div>


        <div class="column-two-thirds employer-details">
            <p class="strong">Message:</p>
            <p>@(string.IsNullOrWhiteSpace(Model.Data.LatestMessage) ? "No message added" : Model.Data.LatestMessage)</p>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-full">
            @{
                var finishEditingText = Model.Data.ShowApproveOnlyOption ? "Continue to approval" : "Save and continue";
            }

            @if (!Model.Data.IsReadOnly)
            {

                <div class="grid-row">
                    <div class="column-full">
                        <div class="emptyStateButton">
                            <hr class="hr-top">
                            <a class="button finishEditingBtn" href="@Url.Action("FinishedEditing")" aria-label="@finishEditingText">@finishEditingText</a>
                            <a href="@Url.Action("CreateApprenticeshipEntry")" class="button button-secondary" aria-label="Add an apprentice">Add an apprentice</a>
                        </div>
                    </div>
                </div>

            }

            <hr class="hr-bottom">

            @if (!Model.Data.HasApprenticeships)
            {

                <div class="grid-row" id="empty-alert-top">
                    <div class="column-full">
                        <div class="panel panel-border-wide alert-default">

                            @if (Model.Data.IsReadOnly)
                            {
                                <p>Apprentices will appear here when the training provider adds them to your cohort.</p>
                            }
                            else
                            {
                                <p>
                                    You haven’t added any apprentices yet - <a href="@Url.Action("CreateApprenticeshipEntry")"> add an apprentice </a>
                                </p>
                            }

                        </div>
                    </div>
                </div>
            }
            else
            {

                <div class="grid-row">
                    <div class="column-full">

                        @foreach (var group in Model.Data.ApprenticeshipGroups)
                        {
                            var groupTitle = string.Format($"{@group.Apprenticeships.Count} x {group.GroupName}");

                            <div class="group-header">

                                <p class="heading-medium">@groupTitle</p>
                                @if (group.TrainingProgramme != null)
                                {
                                    <p>Training code: @group.TrainingProgramme.Id</p>
                                }

                            </div>

                            if(group.OverlapErrorCount > 0)
                            {
                                <div class="overlap-notification" id="error-message-@group.GroupId">
                                    <p class="heading-small">
                                        @_addS("Apprenticeship", group.OverlapErrorCount) can't have overlapping training dates
                                    </p>
                                    <p>
                                        Please update training dates to ensure they do not overlap.
                                    </p>
                                </div>
                               
                            }
                            else if (group.ApprenticeshipsOverFundingLimit > 0 && !Model.Data.Errors.Any())
                            {
                                <div class="funding-cap-alert" id="max-funding-group-@group.GroupId">
                                    <p class="heading-small">
                                        @($"{group.ApprenticeshipsOverFundingLimit}  {_addS("apprenticeship", group.ApprenticeshipsOverFundingLimit).ToLower()} above funding band maximum")
                                    </p>
                                    <p>
                                        The costs are above the &pound;@group.TrainingProgramme.MaxFunding.ToString("N0") <a target="_blank" href="https://www.gov.uk/government/publications/apprenticeship-funding-and-performance-management-rules-2017-to-2018">maximum value of the funding band</a> for this apprenticeship. You'll need to pay the difference directly to the training provider - this can't be funded from your account.
                                    </p>

                                </div>

                            }

                            <table class="tableResponsive viewCommitment">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Unique learner number</th>
                                        <th scope="col">Date of birth</th>
                                        <th scope="col">Training dates</th>
                                        <th scope="col" colspan="2">Cost</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var apprenticeship in group.Apprenticeships.OrderBy(a => a.CanBeApproved))
                                    {
                                        <tr>
                                            <td>
                                                @GetValueOrDefault(apprenticeship.ApprenticeName)
                                            </td>
                                            <td id="apprenticeUln">
                                                @if (!string.IsNullOrEmpty(apprenticeship.ApprenticeUln))
                                                {
                                                    <span>@apprenticeship.ApprenticeUln</span>
                                                }
                                                else
                                                {
                                                    <span class="missing">&ndash;</span>
                                                }
                                                
                                            </td>
                                            <td>
                                                @if (apprenticeship.ApprenticeDateOfBirth.HasValue)
                                                {
                                                    <span>
                                                        @apprenticeship.ApprenticeDateOfBirth.Value.ToGdsFormat()
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="missing">&ndash;</span>
                                                }
                                            </td>
                                            @if (apprenticeship.StartDate != null && apprenticeship.EndDate != null)
                                            {
                                                if (apprenticeship.OverlappingApprenticeships.Any())
                                                {
                                                    <td class="overlap-alert">
                                                        <a href="#error-message-@group.GroupId"
                                                           aria-label="The unique learner number already exists for these training dates"
                                                           aria-describedby="max-funding-group-@group.GroupId"
                                                           title="The unique learner number already exists for these training dates">
                                                            @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay() &nbsp;
                                                        </a>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay()
                                                    </td>
                                                }
                                            }
                                            else
                                            {
                                                <td>
                                                    <span class="missing">&ndash;</span>
                                                </td>
                                            }

                                          @if (group.TrainingProgramme != null && apprenticeship.Cost.HasValue && apprenticeship.Cost > group.TrainingProgramme.MaxFunding && !Model.Data.Errors.Any())
                                          {
                                                <td class="funding-cap-alert-td">
                                                    <a href="#max-funding-group-@group.GroupId" aria-label="Cost is above the maximum funding band" aria-describedby="max-funding-group-@group.GroupId" title="Cost is above the maximum funding band"> @GetValueOrDefault(FormatCost(apprenticeship.Cost))</a>
                                                </td>
                                            }
                                            else
                                            {
                                                <td>
                                                    @GetValueOrDefault(FormatCost(apprenticeship.Cost))
                                                </td>
                                            }

                                            <td>
                                                @if (!Model.Data.IsReadOnly)
                                                {
                                                    <a href="@Url.Action("EditApprenticeship", new {hashedApprenticeshipId = apprenticeship.HashedApprenticeshipId})" aria-label="Edit @apprenticeship.ApprenticeName">Edit</a>
                                                }
                                                else
                                                {
                                                    <a href="@Url.Action("ViewApprenticeship", new {hashedApprenticeshipId = apprenticeship.HashedApprenticeshipId})" aria-label="Edit @apprenticeship.ApprenticeName">View</a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        }

                    </div>
                </div>

            }

        </div>
    </div>
</div>

@if (!Model.Data.IsReadOnly)
{
    <a class="button delete-button" href="@Url.Action("DeleteCohort")" aria-label="Delete cohort">Delete cohort</a>
}

@functions
{

    public string GetApprenticesCountText(IList<ApprenticeshipListItemViewModel> apprenticeships)
    {
        return apprenticeships.Count == 1 ? "1 Apprentice" : $"{apprenticeships.Count} Apprentices";
    }

    readonly Func<string, int, string> _addS = (word, count) => count == 1 ? word : $"{word}s";

    public string PluraliseApprentice(int count)
    {
        return count == 1 ? "Apprentice" : "Apprentices";
    }

    public string PluraliseIncompleteRecords(int count)
    {
        return count == 1 ? "Incomplete record" : "Incomplete records";
    }

    private string GetClickableClass(int requestsCount)
    {
        return requestsCount > 0 ? "clickable" : "";
    }

    public string FormatCost(decimal? cost)
    {
        return !cost.HasValue ? string.Empty : $"£{cost.Value:n0}";
    }
}

@helper GetValueOrDefault(string property)
{
if (!string.IsNullOrEmpty(property))
{
        <span>@property &nbsp;</span>
}
else
{
        <span class="missing">@Html.Raw("&ndash;")</span>
}
}


@section breadcrumb {
    <div class="breadcrumbs">
        <a href="@Model.Data.BackLinkUrl" aria-label="Back" class="back-link">Back</a>
    </div>
}


@section gaDataLayer {
    <script>
        sfa.dataLayer.vpv = '/accounts/apprentices/details/apprentice-detail';
        sfa.dataLayer.cohortRef = '@Model.Data.HashedId';
    </script>
}