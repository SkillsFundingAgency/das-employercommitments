@using SFA.DAS.EmployerCommitments.Web
@using SFA.DAS.EmployerCommitments.Web.Extensions
@using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships

@model OrchestratorResponse<ConfirmationStateChangeViewModel>

@{
    string pageTitle, pageId, pageHeading, pageAction;

    switch (Model.Data.ChangeStatusViewModel.ChangeType.Value)
    {
        case ChangeStatusType.Pause:
            pageTitle = "Apprenticeship paused";
            pageId = "apprentice-paused";
            pageHeading = "Pause apprentice";
            pageAction = "pause";
            break;
        case ChangeStatusType.Resume:
            pageTitle = "Apprenticeship resumed";
            pageId = "apprentice-resumed";
            pageHeading = "Resume apprentice";
            pageAction = "resume";
            break;
        case ChangeStatusType.Stop:
            pageTitle = "Apprenticeship stopped";
            pageId = "apprentice-stopped";
            pageHeading = "Stop apprentice";
            pageAction = "stop";
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(Model.Data.ChangeStatusViewModel.ChangeType), "Not a valid value");
    }

    ViewBag.Title = pageTitle;
    ViewBag.PageId = pageId;
    ViewBag.Section = "apprentices";
}

<div class="grid-row">
    <div class="column-two-thirds">
        <form method="post" action="@Url.RouteUrl("PostStatusChangeConfirmation")" onsubmit="sfa.tagHelper.submitRadioForm('@ViewBag.Title')">
            @Html.AntiForgeryToken()
            @Html.Partial("ValidationSummary", Html.ViewData.ModelState)

            <div class="hgroup">
                <h1 class="heading-xlarge">@pageHeading</h1>
            </div>

            @{
                switch (Model.Data.ChangeStatusViewModel.ChangeType.Value)
                {
                    case ChangeStatusType.Pause:
                        <p class="lede">
                            You're about to pause this apprentice and any future
                            payments to their training provider. Any outstanding
                            payments for training up to this point will still be made.
                        </p>
                        <p class="lede">
                            You'll be able to return and resume the apprentice again
                            later.
                        </p>

                        break;
                    case ChangeStatusType.Resume:
                        <p class="lede">
                                You're about to resume this apprentice and any payments
                                you've authorised to their training provider.
                            </p>
                break;
            case ChangeStatusType.Stop:
                <p class="lede">
                    You're about to stop this apprentice and any payments you've
                    authorised to their training provider.
                </p>

                        <div class="panel panel-border-wide">
                            <p>You won't be able to undo this change.</p>
                        </div>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(Model.Data.ChangeStatusViewModel.ChangeType), "Not a valid value");
                }
            }

            <table class="apprentice-to-stop">
                <thead>
                    <tr>
                        <th colspan="2" class="visually-hidden">Confirm the apprentice to @pageAction</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Name</td>
                        <td class="bold">@Model.Data.ApprenticeName</td>
                    </tr>
                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Resume)
                    {
                        <tr>
                            <td>Paused on</td>
                            <td class="bold">
                                @Model.Data.ChangeStatusViewModel.PauseDate.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>
                        <tr>
                            <td>Resume date</td>
                            <td class="bold">
                                @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>

                    }
                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Stop)
                    {
                        <tr>
                            <td>Date change takes effect</td>
                            <td class="bold">
                                @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (Model.Data.ChangeStatusViewModel.AcademicYearBreakInTraining)
            {
                <div class="panel panel-border-wide">
                        <strong  class="bold-small">
                            You can only resume in this academic year.
                            @Model.Data.ApprenticeName will resume on @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat().
                        </strong>
                   
                </div>
            }
            <div class="form-group">
                <fieldset>

                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Resume)
                    {
                        <legend class="form-label-bold">@Model.Data.ChangeStatusViewModel.ChangeType.Value?</legend>
                    }
                    else
                    {
                        <legend class="form-label-bold">Would you like to @pageAction this apprentice ?</legend>
                    }


                    @Html.ValidationMessage("ChangeConfirmed", "Please choose an option", new { id = "error-message-ChangeConfirmed" })
                    <label for=@($"ChangeConfirmed-True") class="block-label selection-button-radio">
                        @Html.RadioButton("ChangeConfirmed", true, new { id = $"ChangeConfirmed-True", dataOptionName = "Yes", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'Yes')" })
                        Yes, @pageAction this apprentice
                    </label>

                    <label for=@($"ChangeConfirmed-False") class="block-label selection-button-radio">
                        @Html.RadioButton("ChangeConfirmed", false, new { id = $"ChangeConfirmed-False", dataOptionName = "No", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'No')" })
                        No, don't @pageAction this apprentice
                    </label>
                </fieldset>
            </div>
            @Html.Hidden("WhenToMakeChange", Model.Data.ChangeStatusViewModel.WhenToMakeChange)
            @Html.Hidden("DateOfChange.Day", Model.Data.ChangeStatusViewModel.DateOfChange.Day)
            @Html.Hidden("DateOfChange.Month", Model.Data.ChangeStatusViewModel.DateOfChange.Month)
            @Html.Hidden("DateOfChange.Year", Model.Data.ChangeStatusViewModel.DateOfChange.Year)

            <button class="button" type="submit" id="submit-status-change">Confirm</button>
        </form>

    </div>
    <div class="column-one-thirds"> </div>
</div>


@section breadcrumb {
    <div class="breadcrumbs">
        <a href="@Url.RouteUrl("OnProgrammeApprenticeshipDetails")" aria-label="Back to apprentices details" class="back-link">Back</a>
    </div>
}

@section gaDataLayer {
    <script>
        var extraProperties = {
            'vpv': '/accounts/apprentices/manage/@ViewBag.PageId'
        };

        _.assignIn(sfa.dataLayer, extraProperties);
    </script>
}