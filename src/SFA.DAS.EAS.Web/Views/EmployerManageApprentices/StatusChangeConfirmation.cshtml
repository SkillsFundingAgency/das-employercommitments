@using SFA.DAS.EmployerCommitments.Web
@using SFA.DAS.EmployerCommitments.Web.Extensions
@using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships

@model OrchestratorResponse<ConfirmationStateChangeViewModel>

@{
    string pageTitle, pageId, pageHeading, pageAction;

    switch (Model.Data.ChangeStatusViewModel.ChangeType.Value)
    {
        case ChangeStatusType.Pause:
            pageTitle = "Apprenticeship paused";
            pageId = "apprentice-paused";
            pageHeading = "Pause apprenticeship";
            pageAction = "pause";
            break;
        case ChangeStatusType.Resume:
            pageTitle = "Apprenticeship resumed";
            pageId = "apprentice-resumed";
            pageHeading = "Resume apprentice";
            pageAction = "resume";
            break;
        case ChangeStatusType.Stop:
            pageTitle = "Apprenticeship stopped";
            pageId = "apprentice-stopped";
            pageHeading = "Confirm apprenticeship stop";
            pageAction = "stop";
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(Model.Data.ChangeStatusViewModel.ChangeType), "Not a valid value");
    }

    ViewBag.Title = pageTitle;
    ViewBag.PageId = pageId;
    ViewBag.Section = "apprentices";
}

<div class="grid-row">
    <div class="column-two-thirds">
        <form method="post" action="@Url.RouteUrl("PostStatusChangeConfirmation")" onsubmit="sfa.tagHelper.submitRadioForm('@ViewBag.Title')">
            @Html.AntiForgeryToken()
            @Html.Partial("ValidationSummary", Html.ViewData.ModelState)

            <div class="hgroup">
                <h1 class="heading-xlarge">@pageHeading</h1>
            </div>

            @{
                switch (Model.Data.ChangeStatusViewModel.ChangeType.Value)
                {
                    case ChangeStatusType.Pause:
                        <p class="govuk-body">
                            You’re about to pause this apprenticeship and all payments to the training provider. Any payments previously made to the training provider are unaffected.
                        </p>
                        <p class="govuk-body">
                            <a class="govuk-link govuk-body" target="_blank" href="@Model.Data.ViewTransactionsLink" id="view-transactions-link">View your transactions</a> to confirm all payments are up-to-date before pausing.
                        </p>

                        <p class="govuk-body">You can return and resume the apprenticeship at any time.</p>

                        break;
                    case ChangeStatusType.Resume:
                        <p class="lede">
                            You're about to resume this apprentice and any payments
                            you've authorised to their training provider.
                        </p>
                        break;
                    case ChangeStatusType.Stop:

                        <div class="notice">
                            <i class="icon icon-important">
                                <span class="visually-hidden">Warning</span>
                            </i>
                            <strong class="bold-small">
                                This apprenticeship record cannot be restarted once stopped.
                            </strong>
                        </div>
                        <br>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(Model.Data.ChangeStatusViewModel.ChangeType), "Not a valid value");
                }
            }

            <table class="details-list details-list-new">
                <thead>
                    <tr>
                        <th colspan="2" class="visually-hidden">Confirm the apprentice to @pageAction</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">Name</th>
                        <td>@Model.Data.ApprenticeName</td>
                    </tr>
                    <tr>
                        <th scope="row">Unique learner number</th>
                        <td>@Model.Data.ApprenticeULN</td>
                    </tr>
                    <tr>
                        <th scope="row">Apprenticeship training course</th>
                        <td>@Model.Data.ApprenticeCourse</td>
                    </tr>

                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Pause)
                    {
                        <tr>
                            <th scope="row">Date change takes effect</th>
                            <td>
                                @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>
                    }


                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Resume)
                    {
                        <tr>
                            <th scope="row">Pause date</th>
                            <td>
                                @Model.Data.ChangeStatusViewModel.PauseDate.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Resume date</th>
                            <td>
                                @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat()
                            </td>
                        </tr>

                    }
                    @if (Model.Data.ChangeStatusViewModel.ChangeType == ChangeStatusType.Stop)
                    {
                        <tr>
                            <th scope="row">Proposed stop date</th>
                            <td>
                                @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormatLongMonthNameWithoutDay()
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Made redundant</th>
                            <td>
                                @(Model.Data.ChangeStatusViewModel.MadeRedundant.Value ? "Yes" : "No")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (Model.Data.ChangeStatusViewModel.AcademicYearBreakInTraining)
            {
                <div class="panel panel-border-wide">
                    <strong class="bold-small">
                        You can only resume in this academic year.
                        @Model.Data.ApprenticeName will resume on @Model.Data.ChangeStatusViewModel.DateOfChange.DateTime.Value.ToGdsFormat().
                    </strong>

                </div>
            }
            <div class="form-group @Html.AddClassIfPropertyInError("ChangeConfirmed","error")">
                <fieldset>


                    @Html.ValidationMessage("ChangeConfirmed", "Select whether to " + pageAction + " this apprenticeship status or not", new { id = "error-message-ChangeConfirmed" })
                    <label for=@($"ChangeConfirmed-True") class="block-label selection-button-radio">
                        @Html.RadioButton("ChangeConfirmed", true, new { id = $"ChangeConfirmed-True", dataOptionName = "Yes", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'Yes')" })
                        Yes, @pageAction this apprenticeship
                    </label>

                    <label for=@($"ChangeConfirmed-False") class="block-label selection-button-radio">
                        @Html.RadioButton("ChangeConfirmed", false, new { id = $"ChangeConfirmed-False", dataOptionName = "No", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'No')" })
                        No, go back to apprentice details
                    </label>
                </fieldset>
            </div>
            @Html.Hidden("WhenToMakeChange", Model.Data.ChangeStatusViewModel.WhenToMakeChange)
            @Html.Hidden("DateOfChange.Day", Model.Data.ChangeStatusViewModel.DateOfChange.Day)
            @Html.Hidden("DateOfChange.Month", Model.Data.ChangeStatusViewModel.DateOfChange.Month)
            @Html.Hidden("DateOfChange.Year", Model.Data.ChangeStatusViewModel.DateOfChange.Year)
            @Html.Hidden("StartDate", Model.Data.ChangeStatusViewModel.StartDate)
            @Html.Hidden("MadeRedundant", Model.Data.ChangeStatusViewModel.MadeRedundant)

            <button class="button" type="submit" id="submit-status-change">Save and confirm</button>
        </form>

    </div>
    <div class="column-one-thirds"> </div>
</div>


@section breadcrumb {
    <div class="breadcrumbs">
        <a href="#" class="back-link">Back</a>
    </div>
}

@section gaDataLayer {
    <script>
        sfa.dataLayer.vpv = '/accounts/apprentices/manage/@ViewBag.PageId';
    </script>
}