#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFA.DAS.EmployerCommitments.Web.Views.EmployerManageApprentices
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using SFA.DAS.Commitments.Api.Types.Apprenticeship.Types;
    using SFA.DAS.EmployerCommitments;
    using SFA.DAS.EmployerCommitments.Web.Extensions;
    using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships;
    using SFA.DAS.EmployerUrlHelper;
    using SFA.DAS.EmployerUrlHelper.Mvc;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/EmployerManageApprentices/Details.cshtml")]
    public partial class Details : System.Web.Mvc.WebViewPage<SFA.DAS.EmployerCommitments.Web.OrchestratorResponse<ApprenticeshipDetailsViewModel>>
    {
            
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }

        public Details()
        {
        }
        public override void Execute()
        {
  
    ViewBag.Title = "Apprentice detail";
    ViewBag.Section = "apprentices";
    ViewBag.PageId = "apprentices-detail";

WriteLiteral("\r\n<div");

WriteLiteral(" class=\"grid-row\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"column-two-thirds\"");

WriteLiteral(">\r\n\r\n");

        
         if (Model.Data.PendingChanges == PendingChanges.ReadyForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide alert-default\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes for review</h3>\r\n                <p>\r\n                    The training p" +
"rovider has made a change which needs to be reviewed and approved by the employe" +
"r;\r\n                </p>\r\n                <p>\r\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 929), Tuple.Create("\"", 966)
, Tuple.Create(Tuple.Create("", 936), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ReviewChanges")
, 936), false)
);

WriteLiteral(">Review changes</a>\r\n                </p>\r\n            </div>\r\n");

        }
        else if (Model.Data.PendingChanges == PendingChanges.WaitingForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes pending</h3>\r\n                <p>\r\n                    The employer has " +
"made a change which needs to be approved by the training provider\r\n             " +
"   <p>\r\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 1417), Tuple.Create("\"", 1481)
, Tuple.Create(Tuple.Create("", 1424), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ViewChanges", "EmployerManageApprentices")
, 1424), false)
);

WriteLiteral(">View changes</a>\r\n                </p>\r\n            </div>\r\n");

        }

WriteLiteral("\r\n");

        
         if (Model.Data.HasPendingChangeOfProviderRequest
            && Model.Data.PendingChangeOfProviderRequestWithParty.HasValue)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide alert-default\"");

WriteLiteral(">\r\n");

                
                 if (Model.Data.PendingChangeOfProviderRequestWithParty.Value == Party.Employer)
                {

WriteLiteral("                    <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes for review</h3>\r\n");

WriteLiteral("                    <p>\r\n                        There are changes to this appren" +
"tice\'s details that you need to review.\r\n                    </p>\r\n");

                }
                else
                {

WriteLiteral("                    <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes pending</h3>\r\n");

WriteLiteral("                    <p>\r\n                        There are changes to this appren" +
"tice\'s details that are waiting for approval by the training provider.\r\n        " +
"            </p>\r\n");


                }

WriteLiteral("                <p>\r\n                    <a");

WriteLiteral(" id=\"changeOfPartyViewChangesLink\"");

WriteLiteral(" href=\"\"");

WriteLiteral(">View changes</a>\r\n                </p>\r\n            </div>\r\n");

        }

WriteLiteral("\r\n\r\n");

        
         if (Model.Data.HasApprovedChangeOfPartyRequest || Model.Data.IsContinuation)
        {


WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide alert-default\"");

WriteLiteral(">\r\n\r\n\r\n");

                
                 if (Model.Data.HasApprovedChangeOfPartyRequest && Model.Data.IsContinuation)
                {

WriteLiteral("                    <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">  View apprentice record </h3>\r\n");

WriteLiteral("                    <p>\r\n                        The apprentice moved providers d" +
"uring their apprenticeship.\r\n                    </p>\r\n");

                }
                else if (Model.Data.HasApprovedChangeOfPartyRequest)
                {

WriteLiteral("                    <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">  View apprentice record </h3>\r\n");

WriteLiteral("                    <p>\r\n                        The apprentice moved providers d" +
"uring their apprenticeship.\r\n                    </p>\r\n");

                }
                else if (Model.Data.IsContinuation)
                {

WriteLiteral("                    <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">  View apprentice record </h3>\r\n");

WriteLiteral("                    <p>\r\n                        The apprentice moved providers d" +
"uring their apprenticeship.\r\n                    </p>\r\n");

                }

WriteLiteral("\r\n\r\n");

                
                 if (!string.IsNullOrWhiteSpace(Model.Data.HashedNewApprenticeshipId))
                {

WriteLiteral("                    <p>\r\n                        <a");

WriteLiteral(" id=\"continuation-link\"");

WriteLiteral(" class=\"govuk-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 3940), Tuple.Create("\"", 4040)
, Tuple.Create(Tuple.Create("", 3947), Tuple.Create<System.Object, System.Int32>(Url.Action("Details", new { hashedApprenticeshipId = Model.Data.HashedNewApprenticeshipId })
, 3947), false)
);

WriteLiteral(">View the new apprentice record</a>\r\n                    </p>\r\n");

                }

WriteLiteral("\r\n");

                
                 if (!string.IsNullOrWhiteSpace(Model.Data.HashedPreviousApprenticeshipId))
                {

WriteLiteral("                    <p>\r\n                        <a");

WriteLiteral(" id=\"previous-apprentice-link\"");

WriteLiteral(" class=\"govuk-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 4337), Tuple.Create("\"", 4442)
  , Tuple.Create(Tuple.Create("", 4344), Tuple.Create<System.Object, System.Int32>(Url.Action("Details", new { hashedApprenticeshipId = Model.Data.HashedPreviousApprenticeshipId })
, 4344), false)
);

WriteLiteral(">View the old apprentice record</a>\r\n                    </p>\r\n");

                }

WriteLiteral("            </div>\r\n");

        }

WriteLiteral("\r\n");

        
         if (Model.Data.PendingDataLockRestart)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(@">
                    Changes requested
                </h3>
                <p>
                    The apprentice's training provider has asked you to stop this apprentice
                    and then add them to a new cohort using updated training details.
                </p>
                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 5017), Tuple.Create("\"", 5055)
, Tuple.Create(Tuple.Create("", 5024), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestRestart")
, 5024), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">View details</a>\r\n            </div>\r\n");

        }

WriteLiteral("        ");

         if (Model.Data.PendingDataLockChange)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3>\r\n                    Changes for review\r\n                " +
"</h3>\r\n                <p>\r\n                    There are changes to this appren" +
"tice\'s details that you need to review.\r\n                </p>\r\n                <" +
"a");

WriteAttribute("href", Tuple.Create(" href=\"", 5490), Tuple.Create("\"", 5528)
, Tuple.Create(Tuple.Create("", 5497), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestChanges")
, 5497), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">Review changes</a>\r\n            </div>\r\n");

        }

WriteLiteral("\r\n        <h1");

WriteLiteral(" class=\"heading-xlarge\"");

WriteLiteral(" id=\"learnerName\"");

WriteLiteral(">");

                                               Write(Model.Data.FirstName);

WriteLiteral(" ");

                                                                     Write(Model.Data.LastName);

WriteLiteral("</h1>\r\n\r\n");

        
           if (!Model.Data.Status.Equals("Stopped", StringComparison.InvariantCultureIgnoreCase) &&
                     Model.Data.PaymentStatus != PaymentStatus.Completed)
            {

WriteLiteral("                <p>\r\n                    Edit details if there\'s a change in appr" +
"entice or apprenticeship circumstances.\r\n                </p>\r\n");

            }
        
WriteLiteral("\r\n\r\n        <h2");

WriteLiteral(" class=\"heading-medium visually-hidden\"");

WriteLiteral(">Apprentice status</h2>\r\n        <table");

WriteLiteral(" id=\"app-status\"");

WriteLiteral(" class=\"details-list details-list-new\"");

WriteLiteral(">\r\n            <tbody>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Status</th>\r\n                    <td>");

                   Write(Model.Data.Status);

WriteLiteral("</td>\r\n                    <td");

WriteLiteral(" id=\"editStatusLink\"");

WriteLiteral(" class=\"link-right\"");

WriteLiteral(">\r\n");

                        
                         if (Model.Data.CanEditStatus)
                        {
                            
                       Write(Html.RouteLink("Edit status", "ChangeStatusSelectOption"));

                                                                                      ;
                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n");

                
                 if (@Model.Data.PaymentStatus == PaymentStatus.Paused)
                {

WriteLiteral("                    <tr>\r\n                        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Apprenticeship pause date</th>\r\n                        <td");

WriteLiteral(" id=\"pauseDate\"");

WriteLiteral(">\r\n");

                            
                             if (Model.Data.PauseDate.HasValue)
                            {
                                
                           Write(Model.Data.PauseDate.Value.ToGdsFormat());

                                                                         
                            }

WriteLiteral("                        </td>\r\n                        <td></td>\r\n               " +
"     </tr>\r\n");

                }

WriteLiteral("\r\n");

                
                 if (@Model.Data.PaymentStatus == PaymentStatus.Completed)
                {

WriteLiteral("                    <tr>\r\n                        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Completion payment month</th>\r\n                        <td");

WriteLiteral(" id=\"completionDate\"");

WriteLiteral(">\r\n");

                            
                             if (Model.Data.CompletionDate.HasValue)
                            {
                                
                           Write(Model.Data.CompletionDate.Value.ToGdsFormatLongMonthNameWithoutDay());

                                                                                                     ;
                            }

WriteLiteral("                        </td>\r\n                        <td></td>\r\n               " +
"     </tr>\r\n");

                }

WriteLiteral("\r\n");

                
                 if (Model.Data.PaymentStatus == PaymentStatus.Withdrawn)
                {

WriteLiteral("                    <tr>\r\n                        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Stopped date</th>\r\n                        <td");

WriteLiteral(" id=\"stopDate\"");

WriteLiteral(">\r\n");

                            
                             if (Model.Data.StopDate.HasValue)
                            {
                                
                           Write(Model.Data.StopDate.Value.ToGdsFormatWithoutDay());

                                                                                  
                            }

WriteLiteral("                        </td>\r\n\r\n");

                        
                         if (Model.Data.CanEditStopDate)
                        {

WriteLiteral("                            <td");

WriteLiteral(" id=\"editStopDateLink\"");

WriteLiteral(" class=\"link-right\"");

WriteLiteral(">");

                                                                    Write(Html.RouteLink("Edit", "EditStopDateOption"));

WriteLiteral("</td>\r\n");

                        }
                        else
                        {

WriteLiteral("                            <td></td>\r\n");

                        }

WriteLiteral("                    </tr>\r\n");


                    if (Model.Data.MadeRedundant.HasValue)
                    {

WriteLiteral("                        <tr>\r\n                            <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Made redundant</th>\r\n                            <td");

WriteLiteral(" id=\"madeRedundant\"");

WriteLiteral(">\r\n");

WriteLiteral("                                ");

                            Write(Model.Data.MadeRedundant.Value ? "Yes" : "No");

WriteLiteral("\r\n                            </td>\r\n                            <td></td>\r\n     " +
"                   </tr>\r\n");

                    }
                }

WriteLiteral("                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training provider</th>\r\n                    <td>");

                   Write(Model.Data.ProviderName);

WriteLiteral("</td>\r\n");

                    
                     if (Model.Data.PaymentStatus == PaymentStatus.Withdrawn && !string.IsNullOrEmpty(Model.Data.ChangeProviderLink))
                    {

WriteLiteral("                        <td");

WriteLiteral(" class=\"link-right\"");

WriteLiteral(">\r\n                            <a");

WriteLiteral(" id=\"changeTrainingProviderLink\"");

WriteAttribute("href", Tuple.Create(" href=\"", 9549), Tuple.Create("\"", 9586)
, Tuple.Create(Tuple.Create("", 9556), Tuple.Create<System.Object, System.Int32>(Model.Data.ChangeProviderLink
, 9556), false)
);

WriteLiteral(" aria-label=\"Changing training provider\"");

WriteLiteral(">Change</a>\r\n                        </td>\r\n");

                    }
                    else
                    {

WriteLiteral("                        <td></td>\r\n");

                    }

WriteLiteral("                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Cohort reference</th>\r\n                    <td>");

                   Write(Model.Data.CohortReference);

WriteLiteral("</td>\r\n                    <td></td>\r\n                </tr>\r\n            </tbody>" +
"\r\n        </table>\r\n\r\n        <h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">\r\n            Apprentice details\r\n");

            
             if (Model.Data.EnableEdit)
            {

WriteLiteral("                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 10202), Tuple.Create("\"", 10244)
, Tuple.Create(Tuple.Create("", 10209), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("EditApprenticeship")
, 10209), false)
);

WriteLiteral(" class=\"float-right\"");

WriteLiteral(">Edit</a>\r\n");

            }

WriteLiteral("        </h2>\r\n        <table");

WriteLiteral(" class=\"details-list details-list-new\"");

WriteLiteral(">\r\n            <tbody>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Name</th>\r\n                    <td>");

                   Write(Model.Data.FirstName);

WriteLiteral(" ");

                                         Write(Model.Data.LastName);

WriteLiteral("</td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Unique learner number</th>\r\n                    <td>");

                   Write(Model.Data.ULN);

WriteLiteral("</td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Date of birth</th>\r\n                    <td>\r\n");

                        
                         if (Model.Data.DateOfBirth.HasValue)
                        {
                            
                       Write(Model.Data.DateOfBirth.Value.ToGdsFormat());

                                                                       
                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n            </tbody>\r\n        <" +
"/table>\r\n\r\n        <h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">\r\n            Apprenticeship details\r\n        </h2>\r\n        <table");

WriteLiteral(" class=\"details-list details-list-new\"");

WriteLiteral(">\r\n            <tbody>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Apprenticeship training course </th>\r\n                    <td>");

                   Write(Model.Data.TrainingName);

WriteLiteral(" </td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr" +
">\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Planned training start date</th>\r\n                    <td>\r\n");

                        
                         if (@Model.Data.StartDate.HasValue)
                        {
                            
                       Write(Model.Data.StartDate.Value.ToGdsFormatWithoutDay());

                                                                               
                        }

WriteLiteral("                    </td>\r\n                    <td></td>\r\n                </tr>\r\n" +
"                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Planned training finish date</th>\r\n                    <td>\r\n");

                        
                         if (Model.Data.EndDate.HasValue)
                        {
                            
                       Write(Model.Data.EndDate.Value.ToGdsFormatWithoutDay());

                                                                             
                        }

WriteLiteral("                    </td>\r\n                    <td>\r\n");

                        
                         if (Model.Data.PaymentStatus == PaymentStatus.Completed)
                        {

WriteLiteral("                            <a");

WriteLiteral(" id=\"editEndDateLink\"");

WriteAttribute("href", Tuple.Create(" href=\"", 12379), Tuple.Create("\"", 12427)
, Tuple.Create(Tuple.Create("", 12386), Tuple.Create<System.Object, System.Int32>(Model.Data.EditApprenticeshipEndDateLink
, 12386), false)
);

WriteLiteral(" aria-label=\"Edit end date\"");

WriteLiteral(">Edit</a>\r\n");

                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n                <tr>\r\n         " +
"           <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Total agreed apprenticeship price</th>\r\n                    <td>");

                   Write(FormatCost(Model.Data.Cost));

WriteLiteral(" excluding VAT</td>\r\n                    <td></td>\r\n                </tr>\r\n      " +
"          <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Reference </th>\r\n                    <td>");

                   Write(Model.Data.EmployerReference);

WriteLiteral("</td>\r\n                    <td></td>\r\n                </tr>\r\n");

                
                 if (Model.Data.TrainingType == TrainingType.Standard)
                {

WriteLiteral("                    <tr>\r\n                        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">End-point assessor</th>\r\n                        <td>");

                        Write(Model.Data.EndpointAssessorName ?? "The end-point assessor has not been declared");

WriteLiteral("</td>\r\n                        <td></td>\r\n                    </tr>\r\n");

                }

WriteLiteral("            </tbody>\r\n        </table>\r\n\r\n    </div>\r\n</div>\r\n\r\n");

DefineSection("breadcrumb", () => {

WriteLiteral("\r\n    <div");

WriteLiteral(" class=\"breadcrumbs\"");

WriteLiteral(">\r\n        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 13467), Tuple.Create("\"", 13516)
, Tuple.Create(Tuple.Create("", 13474), Tuple.Create<System.Object, System.Int32>(Model.Data.ManageApprenticeshipV2PageLink
, 13474), false)
);

WriteLiteral(" aria-label=\"Back to manage your apprentices\"");

WriteLiteral(" class=\"back-link\"");

WriteLiteral(">Back to manage your apprentices</a>\r\n    </div>\r\n");

});

WriteLiteral("\r\n");

WriteLiteral("\r\n");

DefineSection("gaDataLayer", () => {

WriteLiteral("\r\n    <script>\r\n        sfa.dataLayer.vpv = \'/accounts/apprentices/manage/apprent" +
"ice-details\';\r\n    </script>\r\n");

});

        }
    }
}
#pragma warning restore 1591
