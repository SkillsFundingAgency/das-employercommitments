#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFA.DAS.EmployerCommitments.Web.Views.EmployerManageApprentices
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using SFA.DAS.Commitments.Api.Types.Apprenticeship.Types;
    using SFA.DAS.EmployerCommitments;
    using SFA.DAS.EmployerCommitments.Web.Extensions;
    using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/EmployerManageApprentices/Details.cshtml")]
    public partial class Details : System.Web.Mvc.WebViewPage<SFA.DAS.EmployerCommitments.Web.OrchestratorResponse<ApprenticeshipDetailsViewModel>>
    {
            
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }

        public Details()
        {
        }
        public override void Execute()
        {
  
    ViewBag.Title = "Apprentice detail";
    ViewBag.Section = "apprentices";
    ViewBag.PageId = "apprentices-detail";

WriteLiteral("\n<div");

WriteLiteral(" class=\"grid-row\"");

WriteLiteral(">\n    <div");

WriteLiteral(" class=\"column-two-thirds\"");

WriteLiteral(">\n        <h1");

WriteLiteral(" class=\"heading-xlarge\"");

WriteLiteral(" id=\"learnerName\"");

WriteLiteral(">");

                                               Write(Model.Data.FirstName);

WriteLiteral(" ");

                                                                     Write(Model.Data.LastName);

WriteLiteral("</h1>\n\n");

        
         if (Model.Data.PendingChanges == PendingChanges.ReadyForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide alert-default\"");

WriteLiteral(">\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes for review</h3>\n                <p>\n                    There are change" +
"s to this apprentice\'s details that you need to review.\n                </p>\n   " +
"             <p>\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 949), Tuple.Create("\"", 986)
, Tuple.Create(Tuple.Create("", 956), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ReviewChanges")
, 956), false)
);

WriteLiteral(">Review changes</a>\n                </p>\n            </div>\n");

        }
        else if (Model.Data.PendingChanges == PendingChanges.WaitingForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes pending</h3>\n                <p>\n                    There are changes t" +
"o this apprentice\'s details that are waiting for approval by the training provid" +
"er.\n                <p>\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 1446), Tuple.Create("\"", 1510)
, Tuple.Create(Tuple.Create("", 1453), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ViewChanges", "EmployerManageApprentices")
, 1453), false)
);

WriteLiteral(">View changes</a>\n                </p>\n                </p>\n            </div>\n");

        }

WriteLiteral("\n\n");

        
         if (Model.Data.PendingDataLockRestart)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(@">
                    Changes requested
                </h3>
                <p>
                    The apprentice's training provider has asked you to stop this apprentice
                    and then add them to a new cohort using updated training details.
                </p>
                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 2051), Tuple.Create("\"", 2089)
, Tuple.Create(Tuple.Create("", 2058), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestRestart")
, 2058), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">View details</a>\n            </div>\n");

        }

WriteLiteral("        ");

         if (Model.Data.PendingDataLockChange)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\n                <h3>\n                    Changes for review\n                </h" +
"3>\n                <p>\n                    There are changes to this apprentice\'" +
"s details that you need to review.\n                </p>\n                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 2512), Tuple.Create("\"", 2550)
, Tuple.Create(Tuple.Create("", 2519), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestChanges")
, 2519), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">Review changes</a>\n            </div>\n");

        }

WriteLiteral("\n        <h2");

WriteLiteral(" class=\"heading-medium visually-hidden\"");

WriteLiteral(">Apprentice status</h2>\n        <table");

WriteLiteral(" id=\"app-status\"");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\n            <tbody>\n            <tr>\n                <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Status</th>\n                <td>");

               Write(Model.Data.Status);

WriteLiteral("</td>\n                <td");

WriteLiteral(" id=\"editStatusLink\"");

WriteLiteral(">\n");

                    
                     if (Model.Data.CanEditStatus)
                    {
                        
                   Write(Html.RouteLink("Edit status", "ChangeStatusSelectOption"));

                                                                                  ;
                    }

WriteLiteral("                </td>\n            </tr>\n");

            
             if (Model.Data.PaymentStatus == PaymentStatus.Withdrawn)
            {

WriteLiteral("                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Stop applies from</th>\n                    <td");

WriteLiteral(" id=\"stopDate\"");

WriteLiteral(">\n");

                        
                         if (Model.Data.StopDate.HasValue)
                        {
                            
                       Write(Model.Data.StopDate.Value.ToGdsFormat());

                                                                    
                        }

WriteLiteral("                    </td>\n                    <td");

WriteLiteral(" id=\"editStopDateLink\"");

WriteLiteral(">");

                                         Write(Html.RouteLink("Edit stop date", "EditStopDateOption"));

WriteLiteral("</td>\n                </tr>\n");

            }

WriteLiteral("            </tbody>\n        </table>\n\n        <h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">Overview</h2>\n        <table");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\n            <tbody>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training provider</th>\n                    <td>");

                   Write(Model.Data.ProviderName);

WriteLiteral("</td>\n                </tr>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Cohort reference</th>\n                    <td>");

                   Write(Model.Data.CohortReference);

WriteLiteral("</td>\n                </tr>\n            </tbody>\n        </table>\n\n        <h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">\n            Apprentice\n");

            
             if (Model.Data.EnableEdit)
            {

WriteLiteral("                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 4329), Tuple.Create("\"", 4371)
, Tuple.Create(Tuple.Create("", 4336), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("EditApprenticeship")
, 4336), false)
);

WriteLiteral(" class=\"float-right\"");

WriteLiteral(">Edit</a>\n");

            }

WriteLiteral("        </h2>\n        <table");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\n            <tbody>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Name</th>\n                    <td>");

                   Write(Model.Data.FirstName);

WriteLiteral(" ");

                                         Write(Model.Data.LastName);

WriteLiteral("</td>\n                </tr>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Unique learner number</th>\n                    <td>");

                   Write(Model.Data.ULN);

WriteLiteral("</td>\n                </tr>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Date of birth</th>\n                    <td>\n");

                        
                         if (Model.Data.DateOfBirth.HasValue)
                        {
                            
                       Write(Model.Data.DateOfBirth.Value.ToGdsFormat());

                                                                       
                        }

WriteLiteral("                    </td>\n                </tr>\n                <tr>\n            " +
"        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Apprenticeship training course </th>\n                    <td>");

                   Write(Model.Data.TrainingName);

WriteLiteral(" </td>\n                </tr>\n                ");

WriteLiteral("\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training start date </th>\n                    <td>\n");

                        
                         if (@Model.Data.StartDate.HasValue)
                        {
                            
                       Write(Model.Data.StartDate.Value.ToGdsFormat());

                                                                     
                        }

WriteLiteral("                    </td>\n                </tr>\n                <tr>\n            " +
"        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training end date </th>\n                    <td>\n");

                        
                         if (Model.Data.EndDate.HasValue)
                        {
                            
                       Write(Model.Data.EndDate.Value.ToGdsFormat());

                                                                   
                        }

WriteLiteral("                    </td>\n                </tr>\n                <tr>\n            " +
"        <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Total cost of training </th>\n                    <td>");

                   Write(FormatCost(Model.Data.Cost));

WriteLiteral(" </td>\n                </tr>\n                <tr>\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Reference </th>\n                    <td>");

                   Write(Model.Data.EmployerReference);

WriteLiteral("</td>\n                </tr>\n            </tbody>\n        </table>\n\n    </div>\n</d" +
"iv>\n\n");

DefineSection("breadcrumb", () => {

WriteLiteral("\n    <div");

WriteLiteral(" class=\"breadcrumbs\"");

WriteLiteral(">\n        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 6583), Tuple.Create("\"", 6641)
, Tuple.Create(Tuple.Create("", 6590), Tuple.Create<System.Object, System.Int32>(Url.Action("ListAll", "EmployerManageApprentices")
, 6590), false)
);

WriteLiteral(" aria-label=\"Back to manage your apprentices\"");

WriteLiteral(" class=\"back-link\"");

WriteLiteral(">Back to manage your apprentices</a>\n    </div>\n");

});

WriteLiteral("\n");

WriteLiteral("\n");

DefineSection("gaDataLayer", () => {

WriteLiteral("\n    <script>\n        sfa.dataLayer.vpv = \'/accounts/apprentices/manage/apprentic" +
"e-details\';\n    </script>\n");

});

        }
    }
}
#pragma warning restore 1591
