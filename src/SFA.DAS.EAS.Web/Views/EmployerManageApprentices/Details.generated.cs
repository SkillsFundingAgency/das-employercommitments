#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFA.DAS.EmployerCommitments.Web.Views.EmployerManageApprentices
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using SFA.DAS.Commitments.Api.Types.Apprenticeship.Types;
    using SFA.DAS.EmployerCommitments;
    using SFA.DAS.EmployerCommitments.Web.Extensions;
    using SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/EmployerManageApprentices/Details.cshtml")]
    public partial class Details : System.Web.Mvc.WebViewPage<SFA.DAS.EmployerCommitments.Web.OrchestratorResponse<ApprenticeshipDetailsViewModel>>
    {
            
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }

        public Details()
        {
        }
        public override void Execute()
        {
  
    ViewBag.Title = "Apprentice detail";
    ViewBag.Section = "apprentices";
    ViewBag.PageId = "apprentices-detail";

WriteLiteral("\r\n<div");

WriteLiteral(" class=\"grid-row\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"column-two-thirds\"");

WriteLiteral(">\r\n        <h1");

WriteLiteral(" class=\"heading-xlarge\"");

WriteLiteral(">");

                              Write(Model.Data.FirstName);

WriteLiteral(" ");

                                                    Write(Model.Data.LastName);

WriteLiteral("</h1>\r\n\r\n");

        
         if (Model.Data.PendingChanges == PendingChanges.ReadyForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide alert-default\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes for review</h3>\r\n                <p>\r\n                    There are chan" +
"ges to this apprentice\'s details that you need to review.\r\n                </p>\r" +
"\n                <p>\r\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 954), Tuple.Create("\"", 991)
, Tuple.Create(Tuple.Create("", 961), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ReviewChanges")
, 961), false)
);

WriteLiteral(">Review changes</a>\r\n                </p>\r\n            </div>\r\n");

        }
        else if (Model.Data.PendingChanges == PendingChanges.WaitingForApproval)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Changes pending</h3>\r\n                <p>\r\n                    There are changes" +
" to this apprentice\'s details that are waiting for approval by the training prov" +
"ider.\r\n                <p>\r\n                    <a");

WriteAttribute("href", Tuple.Create(" href=\"", 1462), Tuple.Create("\"", 1526)
, Tuple.Create(Tuple.Create("", 1469), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("ViewChanges", "EmployerManageApprentices")
, 1469), false)
);

WriteLiteral(">View changes</a>\r\n                </p>\r\n                </p>\r\n            </div>" +
"\r\n");

        }

WriteLiteral("\r\n\r\n");

        
         if (Model.Data.PendingDataLockRestart)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(@">
                    Changes requested
                </h3>
                <p>
                    The apprentice's training provider has asked you to stop this apprentice
                    and then add them to a new cohort using updated training details.
                </p>
                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 2084), Tuple.Create("\"", 2122)
, Tuple.Create(Tuple.Create("", 2091), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestRestart")
, 2091), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">View details</a>\r\n            </div>\r\n");

        }

WriteLiteral("        ");

         if (Model.Data.PendingDataLockChange)
        {

WriteLiteral("            <div");

WriteLiteral(" class=\"panel panel-border-wide\"");

WriteLiteral(">\r\n                <h3>\r\n                    Changes for review\r\n                " +
"</h3>\r\n                <p>\r\n                    There are changes to this appren" +
"tice\'s details that you need to review.\r\n                </p>\r\n                <" +
"a");

WriteAttribute("href", Tuple.Create(" href=\"", 2557), Tuple.Create("\"", 2595)
, Tuple.Create(Tuple.Create("", 2564), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("RequestChanges")
, 2564), false)
);

WriteLiteral(" aria-label=\"View details\"");

WriteLiteral(" class=\"\"");

WriteLiteral(">Review changes</a>\r\n            </div>\r\n");

        }

WriteLiteral("\r\n        <h2");

WriteLiteral(" class=\"heading-medium visually-hidden\"");

WriteLiteral(">Apprentice status</h2>\r\n        <table");

WriteLiteral(" id=\"app-status\"");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\r\n            <tbody>\r\n            <tr>\r\n                <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Status</th>\r\n                <td>");

               Write(Model.Data.Status);

WriteLiteral("</td>\r\n                <td>\r\n");

                    
                     if (Model.Data.CanEditStatus)
                    {
                        
                   Write(Html.RouteLink("Edit status", "ChangeStatusSelectOption"));

                                                                                  ;
                    }

WriteLiteral("                </td>\r\n            </tr>\r\n");

            
             if (Model.Data.PaymentStatus == PaymentStatus.Withdrawn)
            {

WriteLiteral("                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Stop applies from</th>\r\n                    <td");

WriteLiteral(" id=\"stopDate\"");

WriteLiteral(">\r\n");

                        
                         if (Model.Data.StopDate.HasValue)
                        {
                            
                       Write(Model.Data.StopDate.Value.ToGdsFormat());

                                                                    
                        }

WriteLiteral("                    </td>\r\n                    <td>");

                   Write(Html.RouteLink("Edit status", "EditStopDateOption"));

WriteLiteral(";</td>\r\n                </tr>\r\n");

            }

WriteLiteral("            </tbody>\r\n        </table>\r\n\r\n        <h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">Overview</h2>\r\n        <table");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\r\n            <tbody>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training provider</th>\r\n                    <td>");

                   Write(Model.Data.ProviderName);

WriteLiteral("</td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Cohort reference</th>\r\n                    <td>");

                   Write(Model.Data.CohortReference);

WriteLiteral("</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <" +
"h2");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">\r\n            Apprentice\r\n");

            
             if (Model.Data.EnableEdit)
            {

WriteLiteral("                <a");

WriteAttribute("href", Tuple.Create(" href=\"", 4381), Tuple.Create("\"", 4423)
, Tuple.Create(Tuple.Create("", 4388), Tuple.Create<System.Object, System.Int32>(Url.RouteUrl("EditApprenticeship")
, 4388), false)
);

WriteLiteral(" class=\"float-right\"");

WriteLiteral(">Edit</a>\r\n");

            }

WriteLiteral("        </h2>\r\n        <table");

WriteLiteral(" class=\"details-list\"");

WriteLiteral(">\r\n            <tbody>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Name</th>\r\n                    <td>");

                   Write(Model.Data.FirstName);

WriteLiteral(" ");

                                         Write(Model.Data.LastName);

WriteLiteral("</td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Unique learner number</th>\r\n                    <td>");

                   Write(Model.Data.ULN);

WriteLiteral("</td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Date of birth</th>\r\n                    <td>\r\n");

                        
                         if (Model.Data.DateOfBirth.HasValue)
                        {
                            
                       Write(Model.Data.DateOfBirth.Value.ToGdsFormat());

                                                                       
                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n                <tr>\r\n         " +
"           <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Apprenticeship training course </th>\r\n                    <td>");

                   Write(Model.Data.TrainingName);

WriteLiteral(" </td>\r\n                </tr>\r\n                ");

WriteLiteral("\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training start date </th>\r\n                    <td>\r\n");

                        
                         if (@Model.Data.StartDate.HasValue)
                        {
                            
                       Write(Model.Data.StartDate.Value.ToGdsFormat());

                                                                     
                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n                <tr>\r\n         " +
"           <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Training end date </th>\r\n                    <td>\r\n");

                        
                         if (Model.Data.EndDate.HasValue)
                        {
                            
                       Write(Model.Data.EndDate.Value.ToGdsFormat());

                                                                   
                        }

WriteLiteral("                    </td>\r\n                </tr>\r\n                <tr>\r\n         " +
"           <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Total cost of training </th>\r\n                    <td>");

                   Write(FormatCost(Model.Data.Cost));

WriteLiteral(" </td>\r\n                </tr>\r\n                <tr>\r\n                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Reference </th>\r\n                    <td>");

                   Write(Model.Data.EmployerReference);

WriteLiteral("</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n    </div" +
">\r\n</div>\r\n\r\n");

DefineSection("breadcrumb", () => {

WriteLiteral("\r\n    <div");

WriteLiteral(" class=\"breadcrumbs\"");

WriteLiteral(">\r\n        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 6699), Tuple.Create("\"", 6757)
, Tuple.Create(Tuple.Create("", 6706), Tuple.Create<System.Object, System.Int32>(Url.Action("ListAll", "EmployerManageApprentices")
, 6706), false)
);

WriteLiteral(" aria-label=\"Back to manage your apprentices\"");

WriteLiteral(" class=\"back-link\"");

WriteLiteral(">Back to manage your apprentices</a>\r\n    </div>\r\n");

});

WriteLiteral("\r\n");

WriteLiteral("\r\n");

DefineSection("gaDataLayer", () => {

WriteLiteral("\r\n    <script>\r\n        sfa.dataLayer.vpv = \'/accounts/apprentices/manage/apprent" +
"ice-details\';\r\n    </script>\r\n");

});

        }
    }
}
#pragma warning restore 1591
