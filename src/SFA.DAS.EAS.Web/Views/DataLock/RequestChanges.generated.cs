#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFA.DAS.EmployerCommitments.Web.Views.DataLock
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using SFA.DAS.EmployerCommitments;
    using SFA.DAS.EmployerCommitments.Web.Extensions;
    using SFA.DAS.EmployerCommitments.Web.ViewModels;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/DataLock/RequestChanges.cshtml")]
    public partial class RequestChanges : System.Web.Mvc.WebViewPage<SFA.DAS.EmployerCommitments.Web.OrchestratorResponse<SFA.DAS.EmployerCommitments.Web.ViewModels.ManageApprenticeships.DataLockStatusViewModel>>
    {
            
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }

        public RequestChanges()
        {
        }
        public override void Execute()
        {
  
    ViewBag.Title = "Review changes";
    ViewBag.Section = "apprentices";
    ViewBag.PageId = "review-datalock-changes";

    var learnerName = Model.Data.LearnerName;
    var uln = Model.Data.ULN;
    var dateOfBirth = Model.Data.DateOfBirth;

WriteLiteral("\r\n\r\n<div");

WriteLiteral(" class=\"grid-row\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"column-full\"");

WriteLiteral(">\r\n        <h1");

WriteLiteral(" class=\"heading-xlarge\"");

WriteLiteral(">");

                              Write(ViewBag.Title);

WriteLiteral("</h1>\r\n\r\n");

        
           Html.RenderPartial("_CoreDetail", new CoreDetailsViewModel
           {
               LearnerName = learnerName,
               ULN = uln,
               DateOfBirth = dateOfBirth
           }); 
WriteLiteral("\r\n\r\n        <p>");

      Write(Model.Data.ProviderName);

WriteLiteral(" has requested these changes:</p>\r\n");

        
           var count = 0; 
WriteLiteral("\r\n");

        
         foreach (var dl in Model.Data.CourseChanges)
        {
            count++;

WriteLiteral("            <h2");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Change ");

                                        Write(count);

WriteLiteral("</h2>\r\n");

WriteLiteral("            <table");

WriteLiteral(" class=\"changes\"");

WriteLiteral(">\r\n                <thead>\r\n                    <tr>\r\n                        <th" +
"></th>\r\n                        <th");

WriteLiteral(" class=\"current\"");

WriteLiteral(">Currently</th>\r\n                        <th");

WriteLiteral(" class=\"changed\"");

WriteLiteral(">Change to</th>\r\n                    </tr>\r\n                </thead>\r\n           " +
"     <tbody>\r\n                    <tr>\r\n                        <td>From date</t" +
"d>\r\n                        <td>\r\n");

WriteLiteral("                            ");

                       Write(dl.CurrentStartDate.ToGdsFormat());

WriteLiteral("\r\n                        </td>\r\n                        <td>");

                       Write(dl.IlrStartDate.Date.ToGdsFormat());

WriteLiteral("</td>\r\n                    </tr>\r\n                    <tr>\r\n                     " +
"   <td>Apprenticeship training course</td>\r\n                        <td>\r\n");

WriteLiteral("                            ");

                       Write(dl.CurrentTrainingProgram);

WriteLiteral("\r\n                        </td>\r\n                        <td>");

                       Write(dl.IlrTrainingProgram);

WriteLiteral("</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r" +
"\n");

        }

WriteLiteral("        ");

         foreach (var p in Model.Data.PriceChanges)
        {
            count++;

WriteLiteral("            <h2");

WriteLiteral(" class=\"heading-small\"");

WriteLiteral(">Change ");

                                        Write(count);

WriteLiteral("</h2>\r\n");

WriteLiteral("            <table");

WriteLiteral(" class=\"changes\"");

WriteLiteral(">\r\n                <thead>\r\n                    <tr>\r\n                        <th" +
"></th>\r\n                        <th");

WriteLiteral(" class=\"current\"");

WriteLiteral(">Currently</th>\r\n                        <th");

WriteLiteral(" class=\"changed\"");

WriteLiteral(">Change to</th>\r\n                    </tr>\r\n                </thead>\r\n           " +
"     <tbody>\r\n                    <tr>\r\n                        <td>Price period" +
"</td>\r\n                        <td>\r\n");

                            
                              
                                if (!p.MissingPriceHistory)
                                {

WriteLiteral("                                    <span>From ");

                                          Write(p.CurrentStartDate.Date.ToGdsFormat());

WriteLiteral("</span>\r\n");

                                }
                            
WriteLiteral("\r\n                        </td>\r\n                        <td>\r\n");

                            
                              
                                var priceDetail = $"From {p.IlrStartDate.Date.ToGdsFormat()}";

                                if (p.IlrEndDate.HasValue)
                                {
                                    priceDetail = $"{p.IlrStartDate.Date.ToGdsFormat()} to {p.IlrEndDate.Value.ToGdsFormat()}";
                                }

                                
                           Write(priceDetail);

                                            

                            
WriteLiteral("\r\n                        </td>\r\n                    </tr>\r\n                    <" +
"tr>\r\n                        <td>Total apprenticeship training price</td>\r\n     " +
"                   <td>\r\n");

                            
                              
                                if (!p.MissingPriceHistory)
                                {

WriteLiteral("                                    <span>");

                                     Write(FormatCost(p.CurrentCost));

WriteLiteral("</span>\r\n");

                                }
                            
WriteLiteral("\r\n                        </td>\r\n                        <td>");

                       Write(FormatCost(p.IlrCost));

WriteLiteral("</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r" +
"\n");

                                }

WriteLiteral("\r\n        <form");

WriteLiteral(" method=\"POST\"");

WriteAttribute("action", Tuple.Create(" action=\"", 4125), Tuple.Create("\"", 4182)
, Tuple.Create(Tuple.Create("", 4134), Tuple.Create<System.Object, System.Int32>(Url.Action("ConfirmRequestChanges", "DataLock")
, 4134), false)
);

WriteLiteral(" novalidate=\"novalidate\"");

WriteLiteral(" id=\"approve-changes\"");

WriteAttribute("onsubmit", Tuple.Create(" onsubmit=\"", 4228), Tuple.Create("\"", 4286)
, Tuple.Create(Tuple.Create("", 4239), Tuple.Create("sfa.tagHelper.submitRadioForm(\'", 4239), true)
                                                                                            , Tuple.Create(Tuple.Create("", 4270), Tuple.Create<System.Object, System.Int32>(ViewBag.Title
, 4270), false)
, Tuple.Create(Tuple.Create("", 4284), Tuple.Create("\')", 4284), true)
);

WriteLiteral(">\r\n");

WriteLiteral("        ");

   Write(Html.AntiForgeryToken());

WriteLiteral("\r\n            <h3");

WriteLiteral(" class=\"heading-medium\"");

WriteLiteral(">Are you happy to approve these changes?</h3>\r\n            <div");

WriteAttribute("class", Tuple.Create(" class=\"", 4425), Tuple.Create("\"", 4517)
, Tuple.Create(Tuple.Create("", 4433), Tuple.Create("form-group", 4433), true)
, Tuple.Create(Tuple.Create(" ", 4443), Tuple.Create<System.Object, System.Int32>(!string.IsNullOrEmpty(Model.Data.ChangesConfirmedError) ? "error" : ""
, 4444), false)
);

WriteLiteral(">\r\n                <fieldset>\r\n                    <legend");

WriteLiteral(" class=\"visually-hidden\"");

WriteLiteral(">Are you happy to approve these changes?</legend>\r\n\r\n                    <div");

WriteLiteral(" id=\"ChangesConfirmed\"");

WriteLiteral("></div>\r\n");

                    
                     if (!string.IsNullOrEmpty(Model.Data.ChangesConfirmedError))
                    {

WriteLiteral("                        <span");

WriteLiteral(" class=\"error-message\"");

WriteLiteral(" id=\"error-message-ChangesConfirmed\"");

WriteLiteral(">");

                                                                                   Write(Model.Data.ChangesConfirmedError);

WriteLiteral("</span>\r\n");

                    }

WriteLiteral("\r\n                    <label");

WriteLiteral(" class=\"block-label selection-button-radio\"");

WriteLiteral(" for=\"changes-approve-true\"");

WriteLiteral(">\r\n");

WriteLiteral("                        ");

                   Write(Html.RadioButton("ChangesConfirmed", true, new { id = "changes-approve-true", dataOptionName = "Yes", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'Yes')" }));

WriteLiteral("\r\n                        Yes, approve these changes\r\n                    </label" +
">\r\n                    <label");

WriteLiteral(" class=\"block-label selection-button-radio\"");

WriteLiteral(" for=\"changes-approve-false\"");

WriteLiteral(">\r\n");

WriteLiteral("                        ");

                   Write(Html.RadioButton("ChangesConfirmed", false, new { id = "changes-approve-false", dataOptionName = "No", onclick = $"sfa.tagHelper.radioButtonClick('{ViewBag.Title}', 'No')" }));

WriteLiteral("\r\n                        No, reject these changes\r\n                    </label>\r" +
"\n                </fieldset>\r\n            </div>\r\n            <button");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"button\"");

WriteLiteral(" aria-label=\"Continue\"");

WriteLiteral(" id=\"submit-req-changes\"");

WriteLiteral(">Continue</button>\r\n            <a");

WriteLiteral(" class=\"button-link break-line\"");

WriteAttribute("href", Tuple.Create(" href=\"", 5940), Tuple.Create("\"", 6069)
, Tuple.Create(Tuple.Create("", 5947), Tuple.Create<System.Object, System.Int32>(Url.Action("Details", "EmployerManageApprentices", new { Model.Data.HashedAccountId, Model.Data.HashedApprenticeshipId })
, 5947), false)
);

WriteLiteral(" aria-label=\"Back to apprentice details\"");

WriteLiteral(">\r\n                Cancel and return\r\n            </a>\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("HashedAccountId", Model.Data.HashedAccountId));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(Html.Hidden("HashedApprenticeshipId", Model.Data.HashedApprenticeshipId));

WriteLiteral("\r\n        </form>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n");

DefineSection("breadcrumb", () => {

WriteLiteral("\r\n    <div");

WriteLiteral(" class=\"breadcrumbs\"");

WriteLiteral(">\r\n        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 6433), Tuple.Create("\"", 6562)
, Tuple.Create(Tuple.Create("", 6440), Tuple.Create<System.Object, System.Int32>(Url.Action("Details", "EmployerManageApprentices", new { Model.Data.HashedAccountId, Model.Data.HashedApprenticeshipId} )
, 6440), false)
);

WriteLiteral(" aria-label=\"Back to apprentice details\"");

WriteLiteral(" class=\"back-link\"");

WriteLiteral(">Back to apprentice details</a>\r\n    </div>\r\n");

});

WriteLiteral("\r\n");

WriteLiteral("\r\n");

DefineSection("gaDataLayer", () => {

WriteLiteral("\r\n    <script>\r\n        sfa.dataLayer.vpv = \'/accounts/apprentices/manage/review-" +
"datalock-changes\';\r\n    </script>\r\n");

});

        }
    }
}
#pragma warning restore 1591
